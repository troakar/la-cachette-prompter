# Конструктор Промтов

Веб-приложение для создания, управления и использования шаблонов для генеративных моделей (LLM).

![Демонстрация работы приложения](https://i.imgur.com/example.gif) 
*(Сюда рекомендуется вставить скриншот или GIF-анимацию работы приложения)*

## Ключевые возможности

### 1. Генератор
- **Быстрая генерация**: Выберите шаблон, заполните несколько полей и мгновенно получите готовый к использованию промт.
- **Встроенные и пользовательские шаблоны**: Используйте готовые пресеты или работайте со своими собственными, сохраненными в конструкторе.
- **Поддержка Rich-Text**: Вставляйте в промт заранее заготовленные большие и сложно отформатированные куски текста через специальный селектор.
- **Динамическое обновление**: Результат обновляется в реальном времени по мере заполнения формы.

### 2. Конструктор Шаблонов
- **Визуальное создание**: Создавайте сложные шаблоны без необходимости писать JSON вручную.
- **Гибкие поля**: Добавляйте в шаблоны различные типы полей:
    - `text`: Однострочное текстовое поле.
    - `textarea`: Многострочная текстовая область.
    - `checkbox-group`: Группа флажков для выбора нескольких значений.
- **Настраиваемые селекторы**: Добавляйте выпадающие списки для выбора одной опции из нескольких.
- **Markdown-редактор**: Пишите основной текст шаблона с помощью удобного редактора с поддержкой Markdown.
- **Предпросмотр**: Мгновенно оценивайте, как будет выглядеть форма для конечного пользователя и какова структура итогового JSON-объекта.

### 3. Управление данными
- **Локальное хранилище**: Все ваши кастомные шаблоны и элементы библиотеки Rich-Text надежно хранятся в `localStorage` вашего браузера.
- **CRUD-операции**: Легко создавайте, редактируйте и удаляйте собственные шаблоны прямо из интерфейса.

## Основные технологии
- **Frontend**: React (с использованием Hooks)
- **Маршрутизация**: React Router
- **Редактор Markdown**: React SimpleMDE (на базе EasyMDE)
- **Стилизация**: Чистый CSS с использованием переменных для гибкой настройки темы.
- **Сборка**: Vite (судя по использованию `import.meta.glob`)

## Структура проекта
/src
├── /components # Переиспользуемые React-компоненты (Preview, TemplateManager и др.)
├── /pages # Компоненты-страницы (Generator, Builder)
├── /services # Логика работы с данными (templateService.js для localStorage)
├── /templates # Встроенные шаблоны (пресеты)
├── App.css # Глобальные стили
├── App.jsx # Корневой компонент с маршрутизацией
└── main.jsx # Точка входа в приложение
code
Code
## Как это работает

Основой приложения является объект **шаблона**, который имеет следующую структуру:
- `prompt_name`: Название, которое видит пользователь.
- `fields`: Массив объектов, описывающих поля для ввода. Каждый объект может иметь `name`, `label`, `type` (`text`, `textarea`, `checkbox-group`), `options` (для чекбоксов) и т.д.
- `selectors`: Массив объектов для выпадающих списков.
- `template`: Основной текст промта с плейсхолдерами `{name}`, которые соответствуют именам полей и селекторов.

Приложение динамически рендерит форму на основе этих объектов и подставляет введенные значения в плейсхолдеры.

## Установка и запуск

1.  Клонируйте репозиторий:
    ```bash
    git clone [адрес_вашего_репозитория]
    ```
2.  Перейдите в директорию проекта:
    ```bash
    cd [название_папки]
    ```
3.  Установите зависимости:
    ```bash
    npm install
    ```
4.  Запустите приложение в режиме разработки:
    ```bash
    npm run dev
    ```
Приложение будет доступно по адресу `http://localhost:5173` (или другому порту, указанному Vite).

## Дальнейшие шаги

- [ ] Синхронизация шаблонов с облаком (Firebase, Supabase).
- [ ] Возможность экспорта и импорта шаблонов в формате JSON.
- [ ] Добавление поддержки условной логики в шаблонах.
- [ ] Внедрение системы версионирования для шаблонов.